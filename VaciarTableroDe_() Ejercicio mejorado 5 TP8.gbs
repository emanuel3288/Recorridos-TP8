
program {
    VaciarTableroDe_(Verde)
}
/*
En cada uno de los casos siguientes, definir de la forma indicada el procedimiento
VaciarTableroDe_(color), que quite todas las bolitas del color dado por el parámetro color de
cada una de las celdas del tablero. El cabezal debe poder comenzar en cualquier celda del tablero, y no
es relevante para el problema donde finaliza, basta con que lo declare en su propósito.
a. Estructurar el procedimiento como un recorrido sobre las filas . ¿Qué subtareas van a precisarse2
en este caso? ¿Es necesario volver a definirlas o se pueden encontrar en esta práctica?
b. Estructurar el procedimiento como un recorrido sobre las celdas del tablero. Las subtareas
necesarias serán diferentes, y puede ser que sea necesario definir alguna que aún no está
disponible en esta práctica.
c. En este última opción, ¿Cuántas formas distintas hay de recorrer el las celdas del tablero? ¿Se
podría elegir valores distintos para los movimientos?
d. Implemente ahora nuevamente el procedimiento de 2 formas distintas.
Reflexionamos ¿Qué diferencias hay entre los recorridos anteriores del punto a y del b? ¿Qué subtareas son más
complejas en cada caso? ¿Podrían considerarse otros recorridos que no fueran sobre celdas o filas?
*/

procedure VaciarTableroDe_(color) {
    VaciarFilaDe_HaciaLa_Y_(color,Este,Norte)
}

procedure VaciarFilaDe_HaciaLa_Y_(color,direccionPrincipal,direccionSecundaria) {
    /*
    Propósito:      -Vacia la fila actual de bolitas de **color** hacia la **direccionPrincipal** y la **direccionSecundaria**.           
    Precondición:   -Ninguna.      
    Parámetros:
        **color**: Color. Indíca el color de las bolitas a sacar de la fila actual.
    Observación: El recorrido es un recorrido por celdas.
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(direccionPrincipal,direccionSecundaria)                 //Inicio del recorrido
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(direccionPrincipal, direccionSecundaria)) {       //quedan celdas por recorrer?
        SacarTodasLasDeColor_(color)                                                            // Procesa
        IrASiguienteCeldaEnUnRecorridoAl_Y_(direccionPrincipal,direccionSecundaria)              //pasa a la siguiente celda
    }                               
    SacarTodasLasDeColor_(color)                                                                    //finaliza el recorrido
    VolverAlInicioDelRecorridoAl_(direccionPrincipal,direccionSecundaria)
}



procedure IrAPrimeraCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
  /*
    PROPÓSITO:          -Posiciona el cabezal en la primera celda del recorrido en **dirPrincipal** y en **dirSecundaria**. 
    PARÁMETROS:
      * dirPrincipal:   -Dirección. Indíca la primer dirección que debe tomar el cabezal para ubicarse en la primera celda del recorrido.
      * dirSecundaria:  -Dirección. Indíca la segunda dirección que debe tomar el cabezal para ubicarse en la primera celda del recorrido.
    PRECONDICIONES:     -ver.
      * 
  */
  IrAlBorde(opuesto(dirPrincipal))
  IrAlBorde(opuesto(dirSecundaria))
}

function haySiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
  /*
    PROPÓSITO:            -Indíca si existe la siguiente celda en un recorrido hacia la **dirPrincipal** y la **dirSecundaria**.
    PARÁMETROS:     
      * dirPrincipal:     -Dirección. Indíca la primera dirección del recorrido. 
      * dirSecundaria:    -Dirección. Indíca la segunda dirección del recorrido.
    PRECONDICIONES:       -Ninguna.
      * 
    Tipo:                 -Booleano.Retorna verdadeor en el caso de que exista una siguiente celda en el recorrido, en caso contrario retorna falso.
  */
  return(puedeMover(dirPrincipal) || puedeMover(dirSecundaria))
}

procedure  IrASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
  /*
    PROPÓSITO:        -Posiciona el cabezal en la siguiente celda del recorrido con **dirPrincipal** y **dirPrincipal**
    PRECONDICIONES:   -Ninguna.
    PARÁMETROS:
      * dirPrincipal: -Dirección.-Indíca la primera dirección del recorrido.
      * dirSecundaria:-Dirección.-Indíca la segunda dirección del recorrido.
  */
  if(puedeMover(dirPrincipal)) {
    Mover(dirPrincipal)
  }else {
    IrAlBorde(opuesto(dirPrincipal))
    Mover(dirSecundaria)
  }
}

procedure SacarTodasLasDeColor_(color) {
    /*
    Propósito:           -Saca todas las bolitas de **color** de la celda actual.
    Precondición:        -Ninguna.
    Parámetros:
        **color**: Color.-Indíca el color de las bolitas a sacar en la celda actual.
    */
    while(hayBolitas(color)) {
        Sacar(color)
    }
}

procedure VolverAlInicioDelRecorridoAl_(dirPrincipal, dirSecundaria) {
    /*
    Propósito:      -Vuelve al inicio del recorrido.
    Precondición:   -Ninguna.
    */
    IrAlBorde(opuesto(dirPrincipal))
    IrAlBorde(opuesto(dirSecundaria))
}


